---
title: "Happy Git and Github for the useR<BR>Session 03 - Early Github Wins"
subtitle: "Boook club R-Ladies Bergen, R-Ladies Den Bosch, R-Ladies Amsterdam"
author: "Book by Jenny, presentation by Martine"
format: 
  rladies-revealjs:
    embed-resources: true  # uncomment for making a selfcontained html for sharing
    slide-number: true
    pdf-max-pages-per-slide: 1
    footer: "[Boook club R-Ladies Bergen, R-Ladies Den Bosch, R-Ladies Amsterdam]"
    incremental: true
---

```{r}
library(fontawesome) # 0.4.0
library(tidyverse)
library(ggflowchart)


```


## Some house rules

-  R-Ladies is dedicated to providing a harassment-free experience for everyone
-  We do not tolerate harassment of participants in any form
-  See [the code of conduct](https://rladies.org/coc/)


## Program for today

-  Get started with GitHub
    -  15 New project, GitHub first
    -  16 Existing project, GitHub first
    -  17 Existing project, GitHub last
    -  18 Test drive R Markdown
    -  19 Render an R script

## Get started with GitHub

-  New project?
    -  Easiest way: GitHub first
-  Existing project?
    -  GitHub first: pragmatic
    -  GitHub last: more proper way to connect, especially if already a Git history
    
    
# Chp 15 - New project, Github first {.inverse}   
    
## New project? Easiest way: GitHub first - Why?

-  Also sets up local Git repo for immediate pulling and pushing
-  Under the hood, we are doing `git clone`
-  The remote GitHub repo is configured as the origin remote for your local repo and your local main branch is now tracking the main on GitHub

## New project? Easiest way: GitHub first - Steps 1/n

-  Make a repo on GitHub
![](newrepo.png){.fragment}  
-  Click the big green “<> Code” button, and copy a clone URL to your clipboard
![](copyurl.png){.fragment}

## New project? Easiest way: GitHub first - Steps 2/n

-  Make a new RStudio Project preferably via (run in *any*     RConsole / R session):  

. . .

```{r}
#| eval: false
#| echo: true
usethis::create_from_github(
  repo_spec = "https://github.com/YOU/YOUR_REPO.git",
  destdir = "~/path/to/where/you/want/the/local/repo/"
)
```

. . . 

-  This creates a new local directory in `destdir`, which is:
   -  a directory or folder on your computer
   -  a Git repository, linked to a remote GitHub repository
   -  an RStudio Project
-  This opens a new RStudio instance in the new Project
-  In the absence of other constraints, Jenny suggest that all of your R projects have exactly this set-up.


## New project? Easiest way: GitHub first - work, save & commit {.smaller}

-  Work on project, then click on `Git` tab:
![](git.png){.fragment}
-  Open `commit` screen by click on `Commit` button in git menu:

:::: {.columns}

::: {.column .fragment width='60%'}
![](commit.png)
:::

::: {.column  width='40%'}

-  check boxes of things you like to commit
-  add `Commit` message
-  hit `Commit` button at bottom
:::

::::


## New project? Easiest way: GitHub first - push {.smaller}

-  New work in your local Git repository, not online yet
-  **Pull** from GitHub 
    -  Why? Establish this habit for the future! If you make changes to the repo in the browser or from another machine or (one day) a collaborator has pushed, you will be happier if you pull those changes in before you attempt to push.

![](pull.png){.fragment}

-  Probably nothing will happen, i.e. you’ll get the message “Already up-to-date.” This is just to establish a habit.

-  Click the green “Push” button to send your local changes to GitHub:
![](push.png){.fragment}

## New project? Easiest way: GitHub first - push {.smaller}  

-  But then this happened `r fa("face-frown", fill = "purple")` ![](fatalerror.png){.fragment}
-  I found this: <https://forum.posit.co/t/issues-with-pushing-from-rstudi-to-git/126509>
-  I realised indeed my PAT had changed
-  The webpage <https://carpentries.github.io/sandpaper-docs/github-pat.html> advised `usethis::git_sitrep()` and after running that I discovered:
    -  Yes, my PAT could be the problem
    -  An advise to read Chp 25 of the book we are reading  <https://happygitwithr.com/common-remote-setups.html>  `r fa("face-laugh-beam", fill = "purple")`
-  I ran `gitcreds::gitcreds_set()` and entered my PAT when asked
-  Then I checked again `usethis::git_sitrep()` and saw it was oke
-  Tried pushing again (after a pull  `r fa("face-smile", fill = "purple")` ) and it worked  `r fa("face-smile-beam", fill = "purple")`  `r fa("face-smile-beam", fill = "purple")`  `r fa("face-smile-beam", fill = "purple")`


## {background-color="#5C8DA9" background-image="zen.gif" background-size="contain"}

# Chp 16 - Existing project, Github first {.inverse}

## Existing project, GitHub first - Make repo

-  slightly goofy way, in order to avoid using Git at the command line
-  not for always, but nice for starters
-  more options in the book, this seems to be the preferred

1.  Have all your files for your R project in the same folder
2.  Make a new repo on github
3.  Now click the green “<> Code” button and copy the URL
4.  In *any* R-session, run:

. . .  
```{r}
#| eval: false
#| echo: true
usethis::create_from_github(
  repo_spec = "https://github.com/YOU/YOUR_REPO.git",
  destdir = "~/path/to/the/folder/in/step/1/"
)
```

. . . 

*So far not so different from "New project, github first"*


## Existing project, Github first - demo 1/2 {.smaller}

1.  Made an R-project in a folder: ![](project.png){width="20%"}
2.  Made a test repo on github 
3.  and copied the url 
4.  Ran the code

. . .  

```{r}
#| eval: false
#| echo: true
usethis::create_from_github(
  repo_spec = "https://github.com/YOU/YOUR_REPO.git",
  destdir = "~/path/to/the/folder/in/step/1/")
```

. . .  
 
 Ran into:
 
 ![](projectinproject.png){.fragment}

. . . 

Conclusion: JUST have the FILES in a folder, not already a project

## Existing project, Github first - demo 2/2

::: columns
::: {.column width="40%"}
-  So I removed project stuff:  
![](justfiles.png){.fragment}
-  reran the code
-  the result:  
![](project_result.png){.fragment}
:::
::: {.column width="60%"}
-  `Test` is the copied Rproj:  
![](projectinfolder.png){.fragment}
-  move files from `Testproject` to `Test`:  
![](moved.png){.fragment}

:::
:::

## Existing project, Github first - content in


::: columns
::: {.column width="60%"}
-  So after the local project is there, relocate the files to that folder
-  Open the project in RStudio
-  All the files should be here if your move/copy was successful
-  Are they showing up in the Git pane with questions marks? They should be appearing as new untracked files.
:::
::: {.column width="40%" .fragment}

![](gitpanefiles.png)
:::
:::

## Existing project, Github first - stage commit {.smaller}


-  Click `Git` tab, check “Staged” box for all files you want to commit.
-  Default: stage it.
-  When to reconsider: *this will all go to GitHub. Consider if that is appropriate for each file. You can absolutely keep a file locally, without committing it to the Git repo and sending to GitHub. Just let it sit there in your Git pane, without being staged. No harm will be done.*    
*If this is a long-term situation, list the file in .gitignore.*
-  If you’re not already in the Git pop-up, click `Commit` to open window
-  Type a message in `Commit message`, such as “Init project XYZ”, and click `Commit` button below 
![](commit_init.png){.fragment width="80%"}

##  Existing project, Github first - what to commit? {.smaller}

-  .Rhistory probably not
-  .RProj?
    -  Posit says **yes** at  
    <https://forum.posit.co/t/should-rproj-files-be-added-to-gitignore/1269/2>
-  .gitignore?
    -  People say **yes** at  
    <https://stackoverflow.com/questions/5765645/should-you-commit-gitignore-into-the-git-repos> and  
    <https://stackoverflow.com/questions/767147/how-can-i-stop-gitignore-from-appearing-in-the-list-of-untracked-files>
    
## Existing project, Github first - push and check

- We are now a branche ahead ![](brancheahead.png){.fragment}
- Push and check on github ![](checkgithub.png){.fragment width="70%"}


## {background-color="#5C8DA9" background-image="zen.gif" background-size="contain"}

# Chp 17 - Existing project, Github last {.inverse}

## Existing project, Github last - Why? & How

-  connecting existing local R project to GitHub,  
when for some reason cannott or don’t want “GitHub first” workflow 
    -  example: existing project already git repo, with a history you care about

. . . 

How?

. . . 


```{r}
#| fig-width: 8
#| fig-height: 3

dBlocks <- tribble(~label, ~xmin, ~xmax, ~ymin, ~ymax,
                   "files", 0, 1, 1, 2, 
                   "other files", 0, 1, -1, -2,
                   "all project files\nin same folder", 1.5, 2.5, -0.5, 0.5,
                   ".RProj", 3, 4, -0.5, 0.5)
dFlows <- tribble(~label, ~x, ~xend, ~y, ~yend, ~linetype,
                  "", 1, 1.5, 1.5, 0, "solid",
                  "", 1, 1.5, -1.5, 0,"solid",
                  "optional", 2.5, 3, 0, 0, "dashed",
                  )

ggplot() +
  geom_rect(data= dBlocks,
            aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
            fill = NA,
            color = "black") +
  geom_text(data = dBlocks,
            aes(x = 0.5*xmin+0.5*xmax,
                y = 0.5*ymin + 0.5*ymax,
                label = label)) +
  geom_segment(data = dFlows,
               aes(x = x, xend = xend, y = y, yend=yend, linetype = I(linetype)),
               arrow = arrow(type = "closed", length = unit(0.1, "inches"))) +
  geom_text(data = dFlows,
            aes(x = 0.5*x+0.5*xend,
                y = 0.5*y + 0.5*yend + 0.1,
                label = label)) +
  theme_void(base_size = 25)
  

```

## EPGL - Prepare the local project (optional) {.smaller}

-  Make the .RProj; 
    -  Within RStudio: `File > New Project > Existing Directory` **OR**
    -  R console: `usethis::create_project("path/to/your/project")`
-  Open the  project
-  Check or make it a git project:
    -  `Git` tab available? Then it is oke
    -  No `git` tab? , choose:
        1.  R Console: `usethis::use_git()`
        2. RStudio: go to `Tools > Project Options … > Git/SVN`.  
        Under “Version control system”, select “Git”. Confirm New Git Repository? Yes!
        3. In the shell, with working directory set to the project’s directory, do `git init`.
    -  Relaunch project automatically with options 1 and 2. Do it yourself for option 3


## EPGL - Stage & Commit {.smaller}

-  If your local project was already a Git repo and was up-to-date, move on.
-  Otherwise:  
    -  Click the “Git” tab in upper right pane
     - Check “Staged” box for all files you want to commit.
         -  Default: stage everything
         -  *When to do otherwise: this will all go to GitHub. So consider if that is appropriate for each file. You can absolutely keep a file locally, without committing it to the Git repo and sending to GitHub. Just let it sit there in your Git pane, without being staged. No harm will be done. If this is a long-term situation, list the file in .gitignore.*
    -  If you’re not already in the Git pop-up, click “Commit”
    -  Type a message in “Commit message” & click “Commit” button

## EPGL - Create and connect a GitHub repo {.smaller}

-  With `usethis`: In your project, in the R Console; `usethis::use_github()`
    -  Creates a new repo on GitHub & configures that as origin remote for local repo
    -  Sets up your local default branch (e.g. main) to track same on origin and does an initial push
    -  Opens the new repo in your browser
-  Without `usethis`:
    -  Create a new repo on GitHub, **DO NOT initialize this repository with anything**
    -  Copy a clone URL
    -  Connect local repo to GitHub repo, either with RStudio: ![](purplesquares.png){.fragment width="40%"}
        - or command line:
            -  `git remote add origin https://github.com/...../....git`
            -  `git push --set-upstream origin main`
  
       



## {background-color="#5C8DA9" background-image="zen.gif" background-size="contain"}
  

# Chp 18 - Test drive R Markdown {.inverse}

## Make an Rmd file {.smaller}

- Launch RStudio in project that is a Git repo connected to GitHub repo
    -  My example project was not on github, so I added it: ![](EPGL.png)
-  Add new file (Rmd) ![](Chp18_01.png){width="30%"}
-  After saving, you see ![](Chp18_02.png){width="30%"}
-  Commit, Render to html, commit again and push
-  Check files on github:
    -  Rmd is readable, but no evaluated code
    -  html, ah well

---

:::: {.columns}

::: {.column}
![](Chp18_foormd.png)
:::

::: {.column .fragment}
![](Chp18_foohtml.png)
:::

::::

## Output format


:::: {.columns}

::: {.column}

-  HTML not really so inviting
-  Note the intermediate markdown, foo.md IS interesting:
-  ![](Chp18_keepmd.png)
:::

::: {.column .fragment}
![](Chp18_md.png)
:::

::::


## Advice

*"Creating, committing, and pushing markdown (i.e., .md files) is a very functional, lighweight publishing strategy. Use output: github_document or, if output is html_document, add keep_md: true. In both cases, it is critical to also commit and push everything inside foo_files, i.e. any figures that have been created. Now people can visit and consume your work on GitHub, like any other webpage."*

. . .  

*"... In this incremental manner, develop your report. Add code to this chunk. Refine it. Add new chunks. Go wild! But keep running the code “manually” to make sure it actually works. If the code doesn’t work with you babysitting it, I can guarantee you it will fail, in a more spectacular and cryptic way, when run at arms-length via “Knit HTML” or rmarkdown::render().Clean out your workspace and restart R and re-run everything periodically, if things get weird."*



# Chp 19 - Render an R script {.inverse}

## Some remarks

-  In R markdown, prose is top-level and code is tucked into chunks
-  In R scripts, code is top-level and prose is tucked into comments
-  R scripts can be rendered

:::: {.columns}

::: {.column}
![](Chp19_script.png){.fragment}

-  In de console `rmarkdown::render("renderrscript.R")`
:::

::: {.column .fragment}
![](Chp19_md.png)
:::


::::







# The end of session 3! {.inverse}

-   **Meetup for the Chapters**
    -   [R-Ladies Amsterdam](https://www.meetup.com/rladies-amsterdam/)
    -   [R-Ladies Bergen](https://www.meetup.com/rladies-bergen/)
    -   [R-Ladies Den Bosch](https://www.meetup.com/nl-NL/rladies-den-bosch/)

-   **We need YOU as a presenter!**
    -  choose your own way of presenting: quarto-revealjs, ppt, ...



```{r, eval = FALSE}
# it would not run with wait = 5 or the default 1
pagedown::chrome_print("session_03_earlygithubwins.html",wait = 10)

```


