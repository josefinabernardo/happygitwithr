---
title: "Happy Git and Github for the useR<BR>Session 05 - Git Remote Setups + Daily Workflows"
subtitle: "Boook club R-Ladies Bergen, R-Ladies Den Bosch, R-Ladies Amsterdam"
author: "Kylie Ainslie"
format: 
  rladies-revealjs:
    embed-resources: true  # uncomment for making a selfcontained html for sharing
    slide-number: true
    pdf-max-pages-per-slide: 1
    footer: "[R-Ladies Book Club]"
    incremental: true
---

```{r}
library(fontawesome) # 0.4.0
library(tidyverse)
library(ggflowchart)

```

## Program for today

-  Remote Setups
    - 25 Common remote setups
    
- Daily Workflows
    - 27 The Repeated Amend
    - 28 Dealing with push rejection
    - 29 Pull, but you have local work
    - 30 Time travel: See the past
    - 31 Fork and clone
    - 32 Get upstream changes for a fork
    - 33 Explore and extend a pull request
    - 34 Make a GitHub repo browsable

. . .

How Git works, concepts, applying it to data science
    
# Chapter 25: Common remote setups {.inverse}   
    
## Recap

- A *remote* is repository hosted elsewhere than your local machine (e.g., on GitHub)
  - On GitHub a remote URL looks like `https://github.com/OWNER/REPO.git` or `git@github.com:OWNER/REPO.git`

:::{.incremental}
![](https_url.png)

![](ssh_url.png)
:::
  - The remote is named `origin` or `upstream`.
- A *fork* is a copy of a repository on a remote server (e.g., GitHub)
- A *clone* is a copy of a repository on your local machine

## No GitHub

- We'll start with a local Git repo (blue barrel) that is not yet connected to GitHub

![](no_github.png){.fragment}
- A local Git repo can be created in several ways:
  - Command line Git: `git init`
  - With `usethis` (in an existing project): `usethis::use_git()`
  - RStudio:
      - Existing Project: *Tools > Version Control > Project Setup*, select Git as the version control system
      - New Project: Make sure “Create a Git repository” is selected

## Yours

- Next, associate a local repo with a copy on GitHub, owned by you
  - A remote named `origin` is configured and you have permission to push to (and pull from) origin
  - `origin` on GitHub is a **source** repo (not a fork or copy of any other repo). 
  - `origin` is also your **primary** repo (it is the primary remote you interact with on GitHub for this project).

![](ours1.png)
## Yours
How can this setup be achieved?

- If the local repo exists first:
  - Detailed instructions are in [Existing project, GitHub last](https://happygitwithr.com/existing-github-last#existing-github-last).
  - With `usethis`: `usethis::use_github()`.
  - Command line Git or RStudio: You can’t complete this task fully (see [Chapter 25.2](https://happygitwithr.com/common-remote-setups) for more details)
  
- If the remote repo exists first:
  - Detailed instructions are in [New RStudio Project via git clone]().
  - With `usethis`: `usethis::create_from_github("OWNER/REPO", fork = FALSE)`.
  - Command line: `git clone <URL>`, with the source repo’s HTTPS or SSH URL
  - RStudio: Capture the source repo’s HTTPS or SSH URL and do *File > New Project > Version Control > Git*.

## Ours

- Another possible configuration is a repo that is owned by someone else who gives you access
- In this case:
    - `origin` is a **source**. 
    - `origin` is also your **primary** repo in this setup.

![](ours2.png){.fragment}
- How to achieve?
  - same as above, but specify `usethis::use_github(organisation = "ORGNAME")`.
  
## Theirs
This is a setup that many people get themselves into, when it’s not actually what they need.
![](theirs.png)
 - You cannot push to `origin`, meaning `origin` is read-only for you.
- What if you do want to make a pull request? 
  - This means you should have done fork-and-clone instead of clone.
  
 - How does this setup happen?
  - Cloning the source repo, either via `git clone <URL>` (command line) or through a Git client, e.g. RStudio’s *File > New Project > Version Control > Git* workflow.
  - Calling `usethis::create_from_github("OWNER/REPO", fork = FALSE)`.
  
## Fork (of theirs)
Ideal setup if you want to make a pull request and follow the development of a source repo owned by someone else.

![](fork_of_theirs.png)
- Your local repo can pull changes from the **source** repo (`upstream`)
  - note: in this setup, you cannot push to `upstream`. 
- You have a fork of the source repo (`origin`) 
  - `origin` is your **primary** repo. 
  - You can push to and pull from `origin`.
  - You can make a pull request back to the source repo via your fork.

## Fork (of theirs)
How to achieve?

  - Detailed instructions are given in [Fork and clone](https://happygitwithr.com/fork-and-clone#fork-and-clone).
  - With usethis: `usethis::create_from_github("OWNER/REPO", fork = TRUE)`.
  - Command line Git or RStudio: You can’t complete this task fully
  
## Fork (of ours)

- This is a less common setup.
  - you have permission to push to the source repo, but you create a personal fork anyway
  - why?
    - it offers maximum development flexibility for advanced users

![](fork_of_ours.png)

- How to achieve?
  - Same as the regular fork setup above.
  - With `usethis`: `usethis::create_from_github("OWNER/REPO", fork = TRUE)`.
  
## Fork (salvageable)
- This is a sub-optimal setup, but can be salvaged

![](fork_salvageable.png)
- How does this happen?
  - Cloning your own fork, either via `git clone` in the shell or through a Git client, such as RStudio. 
  - And then stopping here.
  
- You can convert this setup into the fork setup above:
  - Detailed instructions are in [Finish the fork and clone setup](https://happygitwithr.com/fork-and-clone#fork-and-clone-finish).
  - Add the source repo as the `upstream` remote.
  - Set `upstream/main` as the upstream tracking branch for local main.

# Daily workflows {.inverse} 

# Chapter 27: The repeated amend {.inverse} 

## Recap
- A *commit* is a snapshot of your project at a particular point in time.
  - It captures changes made to files and records them in the version history.
  - `git commit`
- *Amend* is used to rewrite the last commit (e.g., update commit message or files).
  - `git commit --amend`
  - Allows fixing minor issues without creating a new commit

:::{.incremental}
![](amend_example.png)
:::

- Useful when you make a small mistake, like a typo or missing file, in your last commit.

---
## Mountain Climbing Analogy

- Think of your project as a mountain you're climbing.

:::{.incremental}
![](free_climbing.webp)
:::

- Coding without commits is like free-climbing: you can travel much faster in the short-term, but in the long-term the chances of catastrophic failure are high!

:::{.incremental}
![](free_fall.webp)
:::

- Using a commit is like using anchors when climbing.
- If you make a mistake, you can’t fall past the previous commit

:::{.incremental}
![](anchor_climbing.webp)
:::

- If you make a mistake, you can’t fall past the previous commit

:::{.incremental}
![](anchor_fall.webp)
:::

## When to Use Amend

- If you made a minor error or forgot to add files
  - Instead of making a new commit, amend the last one
- If you need to update the commit message
  - `git commit --amend` allows changing the commit message
- This is very easy in RStudio
![](amend_commit.png)
---

## Potential Pitfalls

- **Amending after pushing**:  
  - You should avoid amending commits that have already been pushed to a shared repository
  - Amending pushed commits rewrites history and can cause problems for collaborators
  - Use with caution when working on shared repositories
  
---

## Workflow

1. Start with your project in a functional state.
  - Use `git status` to check this.
  ![](git_status.png)

## Workflow

2. Get to work
  - imagine our commit history looks like this:

:::{.incremental}
  ![](commit_history.png)
:::

  - make a small change towards a larger objective and commit it as `WIP` (work in progress)
  - `git commit -m "WIP"`

:::{.incremental}
  ![](commit_history_WIP.png)
:::

** Don't push!**

## Workflow

2. Get to work

  - Do a bit more work. 
  - Re-check that your project is still in a functional state. 
  - Stage and commit again, but this time amend your previous commit. 
      - `git commit --amend --no-edit`
  
:::{.incremental}
![](commit_history_WIP.png)
:::

** Don't push!**

## Workflow

2. Get to work

  - Keep going until you've achieved your final objective.
  - Now ammending the commit, but add a real message
    - `git commit --amend -m "Implement awesome feature"`
  - Push the changes: `git push` 

:::{.incremental}
![](commit_history_final.png)
:::

** Don't push!**

# The end of the session 4!
::: {.nonincremental}
-   **Meetup for the Chapters**
    -   [R-Ladies Amsterdam](https://www.meetup.com/rladies-amsterdam/)
    -   [R-Ladies Bergen](https://www.meetup.com/rladies-bergen/)
    -   [R-Ladies Den Bosch](https://www.meetup.com/nl-NL/rladies-den-bosch/)

-   **We need YOU as a presenter!**
:::

```{r, eval = FALSE}
pagedown::chrome_print("session_05_gitremotesetups_dailyworkflows.html")

```